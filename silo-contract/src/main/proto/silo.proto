//
// Protocol buffers definition for Silo server
//
syntax = "proto3";
package pt.tecnico.sauron.silo.grpc;
option java_multiple_files = true;

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

enum ObjectType {
    CAR = 0;
    PERSON = 1;
}

message VectorTS {
    repeated int32 ts = 1;
}

message Coordinates {
    double latitude = 1;
    double longitude = 2;
}

message Cam {
    string name = 1;
    Coordinates coordinates = 2;
}

message Object {
    ObjectType type = 1;
    string id = 2;
}

message Observation {
    Object object = 1;
    Cam cam = 2;
    google.protobuf.Timestamp timestamp = 3;
}



message CamJoinRequest {
    Cam cam = 1;
    VectorTS vector = 2;
    string opId = 3;
}

message CamJoinResponse {
    VectorTS vector = 1;
}

message CamInfoRequest {
    string name = 1;
}

message CamInfoResponse {
    Coordinates coordinates = 1;
    VectorTS vector = 2;
}

message Report {
    string name = 1;
    repeated Object object = 2;
}

message ReportRequest {
    Report report = 1;
    VectorTS vector = 2;
    string opId = 3;
}

message ReportResponse {
    VectorTS vector = 1;
}

message TrackRequest {
    ObjectType type = 1;
    string id = 2;		// exact id
}

message TrackResponse {
    Observation observation = 1;
    VectorTS vector = 2;
}

message TrackMatchRequest {
    ObjectType type = 1;
    string id = 2;		// incomplete id
}

message TrackMatchResponse {
    repeated Observation observations = 1;
    VectorTS vector = 2;
}

message TraceRequest {
    ObjectType type = 1;
    string id = 2;		// exact id
}

message TraceResponse {
    repeated Observation observations = 1;
    VectorTS vector = 2;
}

message PingRequest {
    string input = 1;
}

message PingResponse {
    string output = 1;
}

message ClearRequest {}

message ClearResponse {}

message RecordMessage {
    google.protobuf.Any request = 1;
    VectorTS prevTS = 2;
    VectorTS updateTS = 3;
    google.protobuf.Timestamp timestamp = 4;
    int32 instance = 5;
    string opId = 6;
}

message GossipRequest {
    repeated RecordMessage logRecord = 1;
    VectorTS replicaTS = 2;
    int32 instance = 3;
}

message GossipResponse {}


service Sauron {
    rpc CamJoin(CamJoinRequest) returns (CamJoinResponse);

    rpc CamInfo(CamInfoRequest) returns (CamInfoResponse);

    rpc Report(ReportRequest) returns (ReportResponse);

    rpc Track(TrackRequest) returns (TrackResponse);

    rpc TrackMatch(TrackMatchRequest) returns (TrackMatchResponse);

    rpc Trace(TraceRequest) returns (TraceResponse);

    rpc CtrlPing(PingRequest) returns (PingResponse);

    rpc CtrlClear(ClearRequest) returns (ClearResponse);

    rpc Gossip(GossipRequest) returns (GossipResponse);
}
